.r18z41ok{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;height:100%;gap:10px;}.r18z41ok > .rdg{-webkit-flex:1;-ms-flex:1;flex:1;}
.tw445sk{text-align:end;}
.f6i50r .filter-cell{line-height:35px;padding:0;}.f6i50r .filter-cell > div{padding:0 8px;}.f6i50r .filter-cell > div:first-child{border-bottom:1px solid var(--border-color);}
.f10try3s{width:100%;padding:4px;font-size:14px;}
/*# sourceMappingURL=data:application/json;base64,*/